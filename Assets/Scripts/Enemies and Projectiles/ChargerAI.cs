//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System;

public class ChargerAI : Enemy
{
     //Positions
     //public Player player;
     //public float AgroRange;
     //public EnemyMoveController moveController;

     private Vector2 speed, distance, moveDir;

     //State checks
     private bool isAggroed;
     private bool isTired;
     private bool isCharging;

     //Components
     private Animator animator;
     private Rigidbody2D rb;
     //private MoveControllerNoAnimation moveControllerNoAnimation;

     private double timer, runTime, restTime, idleTime;
     private float temp;
     private Vector3 someVec;

     public void Start()
     {
          //moveControllerNoAnimation = GetComponent<MoveControllerNoAnimation> ();
          animator = GetComponent<Animator>();
          player = FindObjectOfType<Player>();
          rb = GetComponent<Rigidbody2D>();
          moveController = GetComponent<EnemyMoveController>();

          distance = new Vector2(0, 0);
          speed = new Vector2(0, 0);

          runTime = 0;
          restTime = 0;
          temp = 1;

          rnd = new System.Random(Guid.NewGuid().GetHashCode());
          t = 3 + rnd.Next(0, 3000) / 1000f;

          timer = 5;

          isAggroed = false;
          isTired = false;
          isCharging = false;
          GetComponent<Rigidbody2D>().mass = 5;
     }

     void Update()
     {
          rnd = new System.Random();
          distance = player.transform.position - transform.position;
          //Check distance between the player and charger. If its close enough, aggro
          if (distance.magnitude <= AgroRange && !isTired && !isCharging)
          {
               moveDir = direction;
               isAggroed = true;
               isCharging = true;
               animator.SetBool("isCharging", true);
          }
          if (false)
          {
               moveDir = direction;
          }
          if (distance.magnitude > AgroRange)
          {
               isAggroed = false;
          }
          // speed = new Vector2(0, 0);

          if (isTired)
          {
               temp = 1;
               moveController.Move(0, 0);
          }
          if (distance.magnitude < (AgroRange - 1))
          {
               if (isTired)
               {
                    moveController.Move(0, 0);
                    moveDir = new Vector2(0, 0);
                    animator.SetBool("isCharging", false);
                    animator.SetBool("isTired", true);
                    restTime += Time.deltaTime;
                    isTired = true;
                    temp = 1;
                    DoneResting();
               }
               else
               {
                    animator.SetBool("isCharging", true);
                    animator.SetBool("isTired", false);
                    findPos();

                    runTime += Time.deltaTime;
                    RunStraight(moveDir / 4f, temp);
                    temp = 5;
                    DoneCharging();
                    //speed = new Vector2(5 * xSpeed, 5 * ySpeed);
                    //speed = speed * 3;
                   
               }
          }

          if (isAggroed)
          {

               //Charge while the charge animation is playing

               //Dont move isaf charger has already charged and is now tired

          } //If the player isnt aggroed, it moves randomly
          else
          {
               if (idleTime > 0.4)
               {
                    someVec = idle(t, rnd);
                    t = someVec.z;
                    idleTime = 0;
               }
               moveController.Move(someVec.x, someVec.y);
          }

          idleTime += Time.deltaTime;
          t -= Time.deltaTime;
          //temp -= Time.deltaTime;
     }

     public void DoneCharging()
     {
          if (runTime >= 1)
          {
               runTime = 0;
               isTired = true;
               isCharging = false;
               animator.SetBool("isCharging", false);
               animator.SetBool("isTired", true);
          }
     }

     public void DoneResting()
     {
          if (restTime >= 1)
          {
               isTired = false;
               moveDir = direction;
               animator.SetBool("isTired", false);
          }
     }

     private void RunStraight(Vector2 sp, float extra)
     {
          if (extra == 1)
          {
               //speed = new Vector2(xSp, ySp);
               //speed = 2 * speed;
               Debug.Log("RUNNING STRAIGHT toward : " + sp);
               moveController.Move(sp);
          }

     }

     public void OnTriggerEnter2D(Collider2D other)
     {
          //Check for player collision
          if (other.gameObject.tag == "Player")
          {
               runTime = 1;
          }

     }

     public void onDeath()
     {
          //animation
     }
}


