//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System;

public class ChargerAlt : Enemy
{

     //Positions
     private Vector2 speed, distance;
     private Vector3 someVec;

     //State checks
     private bool isAggroed;
     private bool isTired;
     private bool isCharging;
     private bool isPrepping;

     //Components
     private Animator animator;
     private Rigidbody2D rb;
     //private MoveControllerNoAnimation moveControllerNoAnimation;

     private double timer, idleTime;
     private float temp, currentVel, maxVel, multiplier;

     public void Start()
     {
          //moveControllerNoAnimation = GetComponent<MoveControllerNoAnimation> ();
          animator = GetComponent<Animator>();
          player = FindObjectOfType<Player>();
          rb = GetComponent<Rigidbody2D>();
          moveController = GetComponent<EnemyMoveController>();

          distance = new Vector2(0, 0);

          temp = 1;
          idleTime = 0;
          timer = 5;

          currentVel = 1f;
          multiplier = 1.05f;
          maxVel = 5;

          isAggroed = false;
          isTired = false;
          isCharging = false;
          isPrepping = false;
          GetComponent<Rigidbody2D>().mass = 5;
     }

     void Update()
     {
          checkInvincibility();
          if (checkStun())
          {
               stunTimer -= Time.deltaTime;
               moveController.Move(0, 0);
          }
          else
          {
               //basic aggression range formula
               if (player)
               {
                    Vector2 distance = player.transform.position - transform.position;
                    //Check distance between the player and charger. If its close enough, aggro
                    if (!isCharging && !isPrepping && !isTired && distance.magnitude < AgroRange)
                    {
                         isPrepping = true;
                         //animator.SetBool("isCharging", true);
                         animator.Play("ChargerCharge");
                    }
                  //  else if (!isCharging && distance.magnitude > AgroRange)
                 //   {
                   //      isAggroed = false;
                  //  }


                    if (isAggroed)
                    {
                         //Ideally would have an animation then leaps to move
                         if (isPrepping || isTired)
                         {
                              GetComponent<Rigidbody2D>().velocity = new Vector2(0,0);
                              currentVel = 1;
                              multiplier = 1.05f;
                              moveController.canMove = false;
                         }
                         else if (isCharging)
                         {
                              moveController.canMove = true;
                              //Debug.Log("HELLO?");
                              moveController.Move(currentVel * direction / 4f);
                              currentVel *= multiplier;
                              multiplier *= 0.999f;
                              Debug.Log(currentVel + "     " + multiplier);
                         }


                    }
                    else
                    {
                         if (!isTired && idleTime > 0.4)
                         {
                              someVec = idle(t, rnd);
                              t = someVec.z;
                              idleTime = 0;
                         }
                         moveController.Move(someVec.x, someVec.y);
                    }

                    idleTime += Time.deltaTime;
                    t -= Time.deltaTime;
               }

               else
               {
                    isAggroed = false;
               }
          }


     }

     public void start()
     {
          if (isPrepping)
          {
               startPrep();
          }
          else
          {
               startCharge();

          }
     }

     public void finish()
     {
          if (!isCharging)
          {
               startCharge();
               animator.Play("ChargerCharge");
          }
          else
          {
               finishCharge();
          }
     }

     public void startPrep()
     {
          isTired = false;
          isCharging = false;
          isPrepping = false;
          isAggroed = true;
     }

     public void startCharge()
     {
          isTired = false;
          isCharging = true;
          isPrepping = false;
          isAggroed = true;
          findPos();
     }


     public void finishCharge()
     {
          isTired = true;
          isCharging = false;
          isPrepping = false;
          animator.Play("ChargerTired");
     }

     public void DoneResting()
     {
          isTired = false;
          isAggroed = false;
     }

     private void RunStraight(float xSp, float ySp, float extra)
     {
          if (extra == 1)
          {
               speed = new Vector2(xSp, ySp);
               speed = 2 * speed;
          }

     }
}


