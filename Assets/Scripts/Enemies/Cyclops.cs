//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

namespace AssemblyCSharp
	
{
	public class Cyclops : MonoBehaviour
	{
		private Player player;
		public float AgroRange;
		public Projectile laser, laserObject;
		
		private EnemyMoveController moveController;
		private Health health;
		
		private bool isAgro;
		
		System.Random rnd;

		private float currentX, currentY, throwF;
		private Transform playerPos;
		private Vector2 distance, speed, facing, vTemp, v_Transform;
		private double t,temp, teleportCD, laserCD;
		
		//private Animator animator;
		
		
		public void Start ()
		{
			//animator = GetComponent<Animator>();
			moveController = GetComponent<EnemyMoveController> ();
			//laser = GetComponent<Projectile> ();
			//laserObject = GetComponent <Projectile> ();
			health = GetComponent<Health> ();
            player = FindObjectOfType<Player>();
			//rigidbody2D.mass = 10;

			distance = new Vector2 (0, 0);
			speed = new Vector2 (0, 0);
			isAgro = false;
			t = 3;
			throwF = 3;
			//temp is the number for exponential speed when running away
			temp = 1.0000001;
			
			facing = new Vector2 (0, 0);
			
		}
		
		public void Update() {
			rnd = new System.Random ();
			currentX = transform.position.x;
			currentY = transform.position.y;
			playerPos = player.transform;
			if (player != null) {
				//basic aggression range formula
				distance = playerPos.position - transform.position;
				if (distance.magnitude <= AgroRange) {
					isAgro = true;
				}
				if (distance.magnitude > AgroRange) {
					isAgro = false;
				}
				
				if (isAgro) {
					float xSp = player.transform.position.x - transform.position.x;
					float ySp = player.transform.position.y - transform.position.y;
					//Debug.Log ("xSp: " + xSp + " ySp: " + ySp);
					moveController.Move (0,0);

					if(distance.magnitude < 0.7 && teleportCD >= 8) {
						transform.position = new Vector2((float)(currentX + 5 * xSp),(float)(currentY + 5 * ySp));
						teleportCD = 0;
					}
					else if(laserCD >= 2.5) {
						if(xSp < 0) {
							xSp = player.transform.position.x - transform.position.x + (float)(1.0/4);
							laser = Instantiate(laserObject, transform.position + new Vector3((float)(-1.0/4),0,0), transform.rotation) as Projectile;
						}
						else {
							laser = Instantiate(laserObject, transform.position, transform.rotation) as Projectile;
						}
						Vector2 toPlayer = new Vector2(xSp,ySp);
						Debug.Log (toPlayer);
						laser.GetComponent<Rigidbody2D>().velocity = (toPlayer * throwF);
						laserCD = 0;
						//throwF = 3;
					}
					if(distance.magnitude < 2) {
					moveController.Move (-xSp/10,-ySp/10);
					}
					
				} else {
					//Debug.Log ("is");
					if (t < 1) {
						if (GetComponent<Rigidbody2D> ().velocity.magnitude != 0) {
							//speed = new Vector2 (0, 0);
							moveController.Move (0,0);
							t = 3;
						}
					} else if (t < 2 && t > 1.3) {
						int rand = rnd.Next (1, 5);
						if (rand == 1) {
							//speed = new Vector2 (2, 0);
							moveController.Move (1,0,5);

							t = 1.3;
						} else if (rand == 2) {
							//speed = new Vector2 (-2, 0);
							moveController.Move (-1,0,5);
							t = 1.3;
						} else if (rand == 3) {
							//speed = new Vector2 (0, 2);
							moveController.Move (0,1,5);
							t = 1.3;
						} else {
							//speed = new Vector2 (0, -2);
							moveController.Move (0,-1,5);							
							t = 1.3;
						}
					}
					t -= Time.deltaTime;
					//GetComponent<Rigidbody2D> ().velocity = speed;
					
				}
				laserCD += Time.deltaTime;
				teleportCD += Time.deltaTime;
				//Debug.Log (t);
				//GetComponent<Rigidbody2D> ().velocity = speed;
				//Debug.Log (rigidbody2D.velocity.magnitude);
			}
		}
		
		public Vector2 getIdle() {
			// facing = moveController.getFacing ();
			float thisX = transform.position.x;
			float thisY = transform.position.y;
			if (facing.x == 1) {
				return new Vector2(thisX - 1, thisY - 1);  
			}
			else if (facing.x == -1) {
				return new Vector2(thisX + 1, thisY - 1);  
			}
			else if (facing.y == 1) {
				return new Vector2(thisX + 1, thisY - 1);  
			}
			else if (facing.y == -1) {
				return new Vector2(thisX - 1, thisY + 1);  
			}
			return new Vector2(0,0);
		}
		
		public bool getAgro() {
			return isAgro;
		}
		
		public int currentHp() {
			return health.currentHealth;
		}
		
		
	}
}


