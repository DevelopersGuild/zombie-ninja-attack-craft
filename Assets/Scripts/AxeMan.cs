//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

namespace AssemblyCSharp

{
	public class AxeMan : MonoBehaviour
	{
		public Player player;
		public float AgroRange;

		private MoveControllerNoAnimation moveController;
		private Health health;

		private bool isAgro;

		System.Random rnd;

		private Vector2 distance, speed, facing;
		private double t;

		//private Animator animator;


		public void Start ()
		{
			//animator = GetComponent<Animator>();
			moveController = GetComponent<MoveControllerNoAnimation> ();
			health = GetComponent<Health> ();
			//rigidbody2D.mass = 10;
			distance = new Vector2 (0, 0);
			speed = new Vector2 (0, 0);
			isAgro = false;
			t = 3;

			facing = new Vector2 (0, 0);

		}

		public void Update() {
			//rigidbody2D.mass = 10;
			//rigidbody2D.drag = 0;
			rnd = new System.Random ();
			//Debug.Log ("My speed is : " + rigidbody2D.velocity);
			//rigidbody2D.velocity = speed;
			//Debug.Log("Now it's : " + rigidbody2D.velocity);

			//basic aggression range formula
			distance = player.transform.position - transform.position;
			if (distance.magnitude <= AgroRange) {
				isAgro = true;
				//animator.SetBool("isCharging", true);
			}
			if (distance.magnitude > AgroRange) {
				isAgro = false;
			}

			if (isAgro) {
				double xSp = player.transform.position.x - transform.position.x;
				double ySp = player.transform.position.y - transform.position.y;
				if(distance.magnitude < 1.5) {
					xSp *= -10;
					ySp *= -10;
				}
				else if(distance.magnitude < 1.8) {
					xSp = 0;
					ySp = 0;
				}
				speed = new Vector2 ((float)xSp, (float)ySp);
				//Debug.Log ("Que es x and y? : " + xSp + " and " + ySp);
				speed = speed.normalized * 3;
			}
			else {
				//Debug.Log ("is");
				if (t < 1) {
					Debug.Log("1");
					if(rigidbody2D.velocity.magnitude != 0) {
						speed = new Vector2 (0, 0);
						t = 3;
						Debug.Log ("All clear");
					}
				} else if(t < 2 && t > 1.3) {
					Debug.Log ("it happening?");
					int rand = rnd.Next (1, 5);
					if (rand == 1) {
						speed = new Vector2 (2,0);
						t = 1.3;
					} else if (rand == 2) {
						speed = new Vector2 (-2,0);
						t=1.3;
					} else if (rand == 3) {
						speed = new Vector2 (0,2);
						t=1.3;
					} else {
						speed = new Vector2 (0,-2);
						t=1.3;
					}
				}
				t -= Time.deltaTime;
				rigidbody2D.velocity = speed;
	   
			}
			//Debug.Log (t);
			rigidbody2D.velocity = speed;
			//Debug.Log (rigidbody2D.velocity.magnitude);
		}

		public Vector2 getIdle() {
			facing = moveController.getFacing ();
			float thisX = transform.position.x;
			float thisY = transform.position.y;
			if (facing.x == 1) {
				return new Vector2(thisX - 1, thisY - 1);  
			}
			else if (facing.x == -1) {
				return new Vector2(thisX + 1, thisY - 1);  
			}
			else if (facing.y == 1) {
				return new Vector2(thisX + 1, thisY - 1);  
			}
			else if (facing.y == -1) {
				return new Vector2(thisX - 1, thisY + 1);  
			}
			return new Vector2(0,0);
		}

		public bool getAgro() {
			return isAgro;
		}
	
		public int currentHp() {
			return health.currentHealth;
		}


	}
}

